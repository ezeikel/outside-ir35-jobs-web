// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_UNPOOLED") // uses a direct connection
}

enum Role {
  JOB_SEEKER
  JOB_POSTER
  ADMIN
}

// Types of job posters
enum PosterType {
  RECRUITER
  DIRECT
}

enum SubscriptionType {
  BASIC
  PRO
}

enum WorkMode {
  REMOTE
  HYBRID
  ON_SITE
}

model Job {
  id                 String        @id @default(cuid())
  companyName        String
  position           String
  description        String
  keywords           String[]
  location           Json
  companyLogo        String?
  dayRate            Int[] // e.g. [100, 200] for a range or [100] for a fixed rate
  howToApply         String
  applicationEmail   String
  workMode           WorkMode
  contractLength     Int? //  in days e.g. 30, 60, 90
  verifiedIR35Status Boolean       @default(false)
  // postedBy           User          @relation(fields: [userId], references: [id])
  // userId             String
  isActive           Boolean       @default(true)
  duration           Int           @default(30) // job post duration in days
  applications       Application[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@map("jobs")
}

model User {
  id               String           @id @default(cuid())
  name             String
  email            String           @unique
  role             Role
  posterType       PosterType?
  contactNumber    String?
  address          String?
  dob              DateTime?
  subscription     Subscription?
  credits          Int              @default(0)
  applications     Application[]
  // jobs             Job[]
  limitedCompanies LimitedCompany[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("users")
}

model LimitedCompany {
  id                  String   @id @default(cuid())
  name                String
  address             String
  bankName            String
  bankAccountNumber   String
  bankSortCode        String
  vatNumber           String
  incorporationNumber String
  user                User     @relation(fields: [userId], references: [id])
  userId              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("limited_companies")
}

model Subscription {
  id        String           @id @default(cuid())
  type      SubscriptionType
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("subscriptions")
}

// Track job applications
model Application {
  id          String   @id @default(cuid())
  jobId       String
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicantId String
  applicant   User     @relation(fields: [applicantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("applications")
}
